xp = require("xp.xp")
ease = require("ease.ease")

function init(self)
	xp.verbose = true
	xp.init()
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(140/255, 127/255, 112/255, 1) } )
	self.time = 0

	self.xp = {}
	self.xp_clipper_node = gui.get_node("xp_clipper")
	self.xp_fg_node = gui.get_node("xp_fg")
	self.xp_clipper_position_original = gui.get_position(self.xp_clipper_node)
	self.xp_fg_position_original = gui.get_position(self.xp_fg_node)
	self.xp_clipper_position_current = gui.get_position(self.xp_clipper_node)
	self.xp_fg_position_current = gui.get_position(self.xp_fg_node)	
	self.xp_width = gui.get_size(self.xp_fg_node).x
	
end

function final(self)

end

function update(self, dt)
	self.time = self.time + dt

	local time = 1
	local total = 20000 / 20000 * 100
	local initial = 50
	local total_new = total - initial
	local easing = ease.in_cubic(math.min(self.time, time), time, 0, total_new) + initial
	--print(easing)
	self.xp_clipper_position_current.x = self.xp_clipper_position_original.x - self.xp_width * (100 - easing) / 100
	self.xp_fg_position_current.x = self.xp_fg_position_original.x + self.xp_width * (100 - easing) / 100 
	gui.set_position(gui.get_node("xp_clipper"), self.xp_clipper_position_current)
	gui.set_position(gui.get_node("xp_fg"), self.xp_fg_position_current)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)

end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
